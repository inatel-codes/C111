2+2
load("~/Projects/Academico/C111/.Rhistory")
2=2
2+2
setwd("~/Projects/Academico/C111")
setwd("~/Projects/Academico/C111/Scripts_DataSet")
getwd()
print("Hello World - R")
plot(1:40)
help("mean")
?mean
install.packages("sos")
library("sos")
findFn("fread")
??matplot
example("matplot")
sqrt(100)
4.5%%3
setwd("C:/Disciplinas_20201/EC020_20201/Curso/Cap04/Scripts")
getwd()
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
getwd()
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
getwd()
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
getwd()
vetor1
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
vetor_caracter = c("dados", "ciencia", "academia")
vetor_caracter
vetor_numerico = c(1.90, 45.3, 300.5)
vetor_numerico
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
vetor_integer  = c(2, 4, 6)
vetor_integer
vetor1 = seq(1:10)     # passa-se os elementos de 1 a 10
vetor1
is.vector(vetor1)
vetor2 = rep(1:5)      # passa-se os elementos de 1 a 5
vetor2
is.vector(vetor2)
a = vetor1
a
a[3]
a[11]    # nao tem indice 11
b = vetor_caracter
b
b[2]
b[4]     # nao tem indice 4
v1 = c(2, 3, 5)
v2 = c("aa", "bb", "cc", "dd", "ee")  # vetor de strings
c(v1, v2)
x = c(1, 3, 5, 7)
y = c(2, 4, 6, 8)
x * 5
x + y
x - y
x * y
x / y
alfa = c(10, 20, 30)                 # com 3 elementos
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9)  # com 9 elementos
alfa + beta
v = c("Carlos", "Nazareth")
v
names(v) = c("Nome", "Sobrenome")
v
v["Nome"]
v["Nome"]
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
getwd()
matrix (c(1,2,3,4,5,6), nr = 2)     # preenchimento por coluna
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
matrix(c(1,2,3,4,5,6), nc = 2)
matrix(c(1,2,3,4), nc = 2)      # Veja!
?matrix
matrix (c(1,2,3,4,5), nc = 2)
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
mat = matrix(c(2,3,4,5), nr = 2)
mat
mat[2,2]
mat[1,3]
mat[,2]
vetor = 1:3
diag(vetor)
matrizdiag = diag(vetor)
vetor1 = diag(matrizdiag)
w <- matrix(c(2,4,8,12 ), nr=2, ncol=2)  # vetor para preencher os elementos da matriz
w
u <- t(w)     # funcao t cria a matriz transposta, transforma linhas em colunas
u
solve(W)
# Obtendo uma matriz inversa
solve(w)
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'), nr = 2)
mat3
dimnames(mat3) = (list(c("Linha1","Linha2"),c("Coluna1","Coluna2")))
mat3
matrix(c(1,2,3,4), nr=2, nc=2, dimname =list(c("Linha 1","Linha 2" ),c("Coluna 1"," Coluna 2")))
mat4 <- matrix(c(2,3,4,5),nr=2)
mat4
mat5 <- matrix(c(6,7,8,9),nr=2)
mat5
cbind(mat4, mat5)
rbind(mat5, mat4)
vetor1 = c(mat4)
mat4
vetor1
lista_caracter1 = list('A', 'B', 'C')          # ver o tipo em Environment
lista_caracter1
lista_caracter2 = list(c("A", "A"), 'B', 'C')  # tenho como 1o. elemento, um vetor
lista_caracter2
lista_caracter3 = list(matrix(c("A", "A", "A", "A"), nr = 2), 'B', 'C')
lista_caracter3
lista_inteiros = list(2, 3, 4)
lista_inteiros
lista_numerico = list(1.90, 45.3, 300.5)
lista_numerico
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta1 = list("A", 3, TRUE)
lista_composta1
lista1 <- list(1:10, c("Brigadeiro", "Beijinho", "Cajuzinho"), rnorm(10))
lista1
lista1[1]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = "Trufa"
lista1
names(lista1) <- c("inteiros", "caracteres", "distrib.normal")
lista1
vec_num <- 1:4
vec_char <- c("A", "B", "C", "D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
lista2 <- list(elemento1 = 3:5, elemento2 = c(7.2,3.5)) # posso criar diretamente
lista2
lista1$caracteres       # vai retornar os elementos da dimensão "caracteres"
length(lista1$inteiros)
lista1$caracteres       # vai retornar os elementos da dimensão "caracteres"
length(lista1$inteiros)
length(lista1)
lista1$caracteres[2]
mode(lista1$distrib.normal)
mode(lista1$caracteres)
lista3 <- c(lista1, lista2)
lista3
v = c(1:3)
v
l  = as.list(v)
l
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
lst1 = list(mat, vec)
lst1
setwd("C:/Users/Alexander/Documents/Projects/Academico/C111/Scripts_DataSet")
getwd()
df <- data.frame()      # como eh vazia, nao preciso passar nenhum parametro
class(df)
df
nomes <- character()   # vetor de nomes vazio
idades <- numeric()    # vetor de double vazio
itens <- numeric()     # vetor de double vazio
codigos <- integer()   # vetor de inteiros vazio
df <- data.frame(c(nomes, idades, itens, codigos))
# passo para a funcao dataframe um vetor de vetores
df
cidade = c("Santa Rita", "Santa Rita", "Pouso Alegre", "Careaçu", "Valença")
nome = c("Amanda", "Flavio", "Milena", "Willer", "Heitor")
altura = c(1.56, 1.82, 1.69, 1.68, 1.80)
matricula = c(1247, 1249, 1240, 1287, 1241)
cidsde
cidade
pesquisa = data.frame(cidade, nome, altura, matricula) # passo direto os nomes dos vetores
pesquisa
olhos = c("castanho", "azul", "castanho", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)   # faz uma ligacao de 2 objetos pela coluna
pesq
str(pesq)
dim(pesq)
length(pesq)
pesq$cidade      # nome do dataframe $ nome da coluna
pesq$nome
pesq[1,1]
pesq[3,2]
nrow(pesq)
ncol(pesq)
head(pesq)
head(mtcars)
tail(pesq)
tail(mtcars)
mtcars
View(mtcars)
pesq[altura < 1.60,]
pesq[altura < 1.60, c('nome', 'altura')] # retorna um conjunto especifico
pesq
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
View(pacientes)
head(pacientes)
summary(pacientes)
pacientes$Diabete
pacientes$status
pacientes$Status
hist(pacientes$Idade)
dataset_final <- merge(pesq, pacientes)  # faz um produto cartesiano dos 2 datasets
dataset_final
